/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SynonymerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// settings.ts
var DEFAULT_SETTINGS = {
  enableOnlineLookup: true,
  apiSource: "svenskaSe",
  apiKey: "",
  maxSynonyms: 10,
  fallbackToLocalDictionary: true,
  alwaysTryOnline: false
};

// synonymService.ts
var import_obsidian = require("obsidian");

// swedishSynonyms.ts
var fullSwedishDictionary = {
  "snabb": ["hastig", "kvick", "rapp", "vig", "flink", "skyndsam", "rask", "blixtsnabb", "rivande", "pilsnabb", "rappt", "flott", "snabbt", "ilande", "frenetisk", "rusande", "fort", "hastigt"],
  "l\xE5ngsam": ["tr\xF6g", "sl\xF6", "s\xE4vlig", "seg", "maklig", "dr\xF6jande", "sm\xE5ningom", "sakta", "avsiktlig", "utdragen", "l\xE5ngdragen", "s\xF6lig", "sl\xE4pig", "l\xE5ngsamt", "tr\xF6gt\xE4nkt", "retarderad"],
  "stor": ["enorm", "gigantisk", "m\xE4ktig", "omfattande", "v\xE4ldig", "ansenlig", "betydande", "kolossal", "reslig", "imposant", "j\xE4ttelik", "massiv", "omf\xE5ngsrik", "vidlyftig", "storartad", "monumental"],
  "liten": ["minimal", "obetydlig", "oansenlig", "knapp", "futtig", "ringa", "diminutiv", "blygsam", "f\xF6rminskad", "n\xE4tt", "pygm\xE9", "miniatyr", "mikroskopisk", "pytteliten", "ynklig", "bitte"],
  "glad": ["munter", "lycklig", "upprymd", "n\xF6jd", "bel\xE5ten", "f\xF6rtjust", "str\xE5lande", "gl\xE4djefull", "gl\xE4ttig", "uppspelt", "jublande", "gl\xE4djestr\xE5lande", "exalterad", "euforisk", "salig", "gl\xE4djefylld"],
  "ledsen": ["bedr\xF6vad", "sorgsen", "dyster", "nedslagen", "besviken", "olycklig", "sorgfull", "nedst\xE4md", "modf\xE4lld", "melankolisk", "deprimerad", "deppig", "bekymrad", "betryckt", "tungsint", "ledsam"],
  "arg": ["ilsken", "f\xF6rbittrad", "rasande", "ursinnig", "vred", "uppretad", "f\xF6rargad", "irriterad", "uppbragt", "f\xF6rgrymmad", "rosenrasande", "f\xF6rbannad", "arg som ett bi", "ilsk", "f\xF6rarglig", "uppr\xF6rd"],
  "bra": ["utm\xE4rkt", "f\xF6rtr\xE4fflig", "ypperlig", "duglig", "fin", "god", "kompetent", "f\xF6rstklassig", "framst\xE5ende", "gynnsam", "gedigen", "excellent", "fantastisk", "str\xE5lande", "h\xF6gklassig", "prima"],
  "d\xE5lig": ["bristf\xE4llig", "underm\xE5lig", "usel", "kass", "v\xE4rdel\xF6s", "svag", "otillr\xE4cklig", "misslyckad", "medioker", "negativ", "ol\xE4mplig", "mediokert", "skral", "el\xE4ndig", "urusel", "underm\xE5ligt"],
  "vacker": ["sk\xF6n", "attraktiv", "tilltalande", "f\xF6rtjusande", "bed\xE5rande", "behaglig", "charmerande", "ljuvlig", "stilig", "st\xE5tlig", "praktfull", "vad", "ansl\xE5ende", "intagande", "betagande", "\xE4lsklig"],
  "ful": ["motbjudande", "oattraktiv", "anskr\xE4mlig", "vederv\xE4rdig", "fr\xE5nst\xF6tande", "hemsk", "ot\xE4ck", "otrevlig", "gr\xE4slig", "avskyv\xE4rd", "grotesk", "vanskaplig", "v\xE4mjelig", "vidrig", "stygg", "osk\xF6n"],
  "pl\xF6tslig": ["abrupt", "h\xE4ftig", "hastig", "ov\xE4ntad", "tv\xE4rt", "\xF6verraskande", "of\xF6rberedd", "of\xF6rutsedd", "drastisk", "blixtsnabb", "\xF6gonblicklig", "tv\xE4r", "of\xF6rmodad", "pl\xF6tsligt", "momentan", "snabb"],
  "viktig": ["betydelsefull", "avg\xF6rande", "central", "v\xE4sentlig", "angel\xE4gen", "n\xF6dv\xE4ndig", "essentiell", "fundamental", "betydande", "grundl\xE4ggande", "v\xE4sentligt", "huvudsaklig", "prim\xE4r", "kritisk", "vital", "relevant"],
  "oviktig": ["betydelsel\xF6s", "ov\xE4sentlig", "obetydlig", "irrelevant", "sekund\xE4r", "perifer", "marginell", "f\xF6rsumbar", "ovidkommande", "trivial", "betydelsel\xF6st", "underordnad", "ringa", "ov\xE4rt", "obetydlig", "\xF6verfl\xF6dig"],
  "sv\xE5r": ["besv\xE4rlig", "komplicerad", "kr\xE5nglig", "invecklad", "problematisk", "m\xF6dosam", "arbetsam", "knepig", "knivig", "komplex", "sv\xE5rl\xF6st", "intrikat", "sv\xE5rhanterlig", "sv\xE5rt", "jobbig", "sv\xE5rfattlig"],
  "l\xE4tt": ["enkel", "simpel", "okomplicerad", "smidig", "bekv\xE4m", "oproblematisk", "l\xE4tthanterlig", "element\xE4r", "basal", "l\xE4ttsk\xF6tt", "okonstlad", "l\xE4ttsam", "l\xE4ttbegriplig", "l\xE4tt", "l\xE4ttfattlig", "enkelt"],
  "god": ["bra", "fin", "uts\xF6kt", "v\xE4lsmakande", "delikat", "l\xE4cker", "smaklig", "aptitlig", "v\xE4lgjord", "smakfull", "aptitretande", "kulinarisk", "f\xF6rtr\xE4fflig", "saftig", "h\xE4rlig", "ypperlig"],
  "b\xF6rja": ["starta", "inleda", "p\xE5b\xF6rja", "initiera", "ig\xE5ngs\xE4tta", "ta itu med", "s\xE4tta ig\xE5ng", "g\xE5 ig\xE5ng", "komma ig\xE5ng", "antr\xE4da", "p\xE5b\xF6rjas", "inledas", "ta sin b\xF6rjan", "\xF6ppnas", "ta fart", "bege sig"],
  "sluta": ["avsluta", "upph\xF6ra", "avbryta", "fullborda", "f\xE4rdigst\xE4lla", "fullg\xF6ra", "st\xE4nga", "l\xE4gga ned", "l\xE4gga av", "g\xF6ra slut p\xE5", "bli klar", "f\xE5 ett slut", "avslutad", "upph\xF6r", "avrunda", "kulminera"],
  "\xE4ta": ["f\xF6rt\xE4ra", "konsumera", "inta", "smaka", "kalasa", "avnjuta", "stoppa i sig", "mumsa", "bita", "tugga", "sluka", "frossa", "snaska", "proppa i sig", "m\xE4tta sig", "spisera"],
  "dricka": ["f\xF6rt\xE4ra", "inta", "konsumera", "sl\xE4cka t\xF6rsten", "svepa", "s\xF6rpla", "smutta", "t\xF6mma", "klunka", "dricka ur", "sk\xF6lja ned", "ta en klunk", "svepande", "nedsv\xE4ljer", "drucker", "inmundiga"],
  "sova": ["vila", "slumra", "snarkar", "dr\xF6mma", "tupplur", "ta en lur", "ligga", "h\xE5llas i s\xE4ng", "s\xE4ngliggande", "sova tungt", "slumra till", "somnar", "sovandes", "nattro", "sovit", "vilande"],
  "prata": ["tala", "konversera", "samtala", "diskutera", "meddela", "ber\xE4tta", "snacka", "tjata", "spr\xE4ka", "resonera", "yttra", "ventilera", "meddela", "spr\xE5kas vid", "pladder", "ordfl\xF6de"],
  "arbeta": ["jobba", "verka", "fungera", "knoga", "slita", "utf\xF6ra", "producera", "\xE5stadkomma", "prestera", "\xE4gna sig", "arbete", "arbetande", "verksam", "operera", "m\xF6dande", "str\xE4va"],
  "l\xE4ra": ["studera", "l\xE4ser", "utbilda", "undervisa", "instruera", "inpr\xE4nta", "memorera", "plugga", "repetera", "l\xE4rande", "l\xE4raktig", "l\xE4rdom", "undervisar", "l\xE4r", "utbildar", "skolar"],
  "leva": ["existera", "finnas", "vara", "bo", "vistas", "fortleva", "\xF6verleva", "leva upp", "livsuppeh\xE4lle", "leverne", "levnad", "livn\xE4ra sig", "lever", "existerat", "levandes", "existens"],
  "d\xF6": ["avlida", "g\xE5 bort", "somna in", "omkomma", "f\xF6rg\xE5s", "sluta", "uppge andan", "slockna", "dra sin sista suck", "avlider", "d\xF6r", "d\xF6ende", "avlidit", "d\xF6tt", "d\xF6dsfall", "f\xF6rlisa"],
  "l\xE4sa": ["studera", "tillgodog\xF6ra sig", "ta del av", "granska", "titta igenom", "bl\xE4ddra", "l\xE4ser", "l\xE4sare", "l\xE4sning", "l\xE4st", "l\xE4stes", "reciterar", "l\xE4sandes", "genoml\xE4ser", "skuml\xE4sa", "perlustrerar"],
  "skriva": ["f\xF6rfatta", "utforma", "komponera", "nedteckna", "skriver", "anteckna", "nedskriva", "skribent", "skrift", "skriven", "skriftlig", "skriverier", "skrivit", "skriftst\xE4llare", "skrivare", "f\xF6rfattare"],
  "se": ["titta", "betrakta", "sk\xE5da", "iaktta", "observera", "bese", "syna", "ser", "seende", "blicka", "glo", "stirra", "besiktiga", "besk\xE5da", "synar", "granskar"],
  "h\xF6ra": ["lyssna", "uppfatta", "f\xF6rnimma", "avlyssna", "h\xF6ra p\xE5", "uppsnappa", "h\xF6r", "h\xF6rande", "h\xF6rsel", "h\xF6rd", "h\xF6rt", "\xF6ron", "h\xF6rsamma", "uppf\xE5ngat", "h\xF6rs\xE4gen", "lyh\xF6rd"],
  "gammal": ["\xE5ldrig", "antik", "f\xF6r\xE5ldrad", "f\xF6rlegad", "ur\xE5ldrig", "bedagad", "forntida", "\xE5ldersstigen", "utsliten", "\xE5lderstigen", "\xE5ldrad", "antiken", "klassisk", "\xE5lderdomlig", "\xE5ldrige", "senior"],
  "ny": ["f\xE4rsk", "modern", "aktuell", "nymodig", "fr\xE4sch", "of\xF6rbrukad", "nyskapande", "innovativ", "banbrytande", "originell", "nyhet", "nyligare", "nytillkommen", "nyuppkommen", "nyanskaffad", "nyl\xE4ggning"],
  "komma": ["anl\xE4nda", "infinna sig", "uppenbara sig", "dyka upp", "n\xE5", "ankomma", "intr\xE4ffa", "tillkomma", "uppenbaras", "arrivera", "ankommande", "ankommer", "anl\xE4nt", "kommit", "inkommande", "antr\xE4ffas"],
  "g\xE5": ["promenera", "vandra", "spatsera", "traska", "klampa", "stega", "strosa", "g\xE5ende", "g\xE5ngare", "g\xE5tt", "g\xE5r", "avl\xE4gsna sig", "beger sig", "f\xF6rflyttar sig", "l\xE4mnar", "f\xF6rl\xF6per"],
  "fort": ["hastigt", "kvickt", "snabbt", "raskt", "skyndsamt", "rappt", "blixtsnabbt", "rivande", "pilsnabbt", "express", "flinkt", "kvickt", "skyndsammare", "hastande", "skyndande", "ilande"],
  "tr\xF6tt": ["utmattad", "uttr\xF6ttad", "s\xF6mnig", "slut", "d\xE5sig", "orkesl\xF6s", "kraftl\xF6s", "sliten", "medtagen", "utpumpad", "utarbetad", "uttr\xF6ttad", "\xF6veranstr\xE4ngd", "utsliten", "kraftl\xF6s", "slutk\xF6rd"],
  "stark": ["kraftig", "m\xE4ktig", "potent", "robust", "muskul\xF6s", "stabil", "kraftfull", "v\xE4lbyggd", "styrket\xE5lig", "dominant", "styrka", "muskler", "styrket\xE5lig", "v\xE4lformad", "h\xE5llfast", "uth\xE5llig"],
  "svag": ["kraftl\xF6s", "orkesl\xF6s", "matt", "klen", "br\xE4cklig", "vag", "urholkad", "maktl\xF6s", "tandl\xF6s", "medioker", "\xF6mt\xE5lig", "sjuklig", "mager", "kraftl\xF6s", "blek", "antydan"],
  "\xE4rlig": ["uppriktig", "sannf\xE4rdig", "sanningsenlig", "r\xE4ttfram", "redbar", "r\xE4ttr\xE5dig", "of\xF6rfalskad", "p\xE5litlig", "okonstlad", "rak", "rakryggad", "transparent", "renh\xE5rig", "lojal", "trogen", "r\xE4ttvis"]
};

// synonymService.ts
var SynonymService = class {
  constructor(settings) {
    this.settings = settings;
    console.log("SynonymService initialized with settings:", JSON.stringify({
      enableOnlineLookup: settings.enableOnlineLookup,
      apiSource: settings.apiSource,
      hasApiKey: !!settings.apiKey,
      maxSynonyms: settings.maxSynonyms,
      fallbackToLocalDictionary: settings.fallbackToLocalDictionary,
      alwaysTryOnline: settings.alwaysTryOnline
    }));
  }
  async getSynonyms(word) {
    console.log(`Getting synonyms for: "${word}"`);
    const localSynonyms = this.getLocalSynonyms(word);
    console.log(`Found ${localSynonyms.length} local synonyms`);
    if (localSynonyms.length > 0 && !this.settings.alwaysTryOnline || !this.settings.enableOnlineLookup) {
      return localSynonyms.slice(0, this.settings.maxSynonyms);
    }
    try {
      console.log(`Trying online lookup from ${this.settings.apiSource}`);
      const onlineSynonyms = await this.getOnlineSynonyms(word);
      console.log(`Found ${onlineSynonyms.length} online synonyms`);
      if (onlineSynonyms.length > 0) {
        return onlineSynonyms.slice(0, this.settings.maxSynonyms);
      }
      if (localSynonyms.length > 0 && this.settings.fallbackToLocalDictionary) {
        console.log("Using local synonyms as fallback");
        return localSynonyms.slice(0, this.settings.maxSynonyms);
      }
      console.log("No synonyms found anywhere");
      return [];
    } catch (error) {
      console.error("Error fetching online synonyms:", error);
      if (localSynonyms.length > 0 && this.settings.fallbackToLocalDictionary) {
        console.log("Error occurred, using local synonyms as fallback");
        return localSynonyms.slice(0, this.settings.maxSynonyms);
      }
      throw new Error(`Kunde inte h\xE4mta synonymer: ${error instanceof Error ? error.message : "CORS-fel eller n\xE4tverksproblem"}`);
    }
  }
  getLocalSynonyms(word) {
    const normalizedWord = word.toLowerCase().trim();
    return fullSwedishDictionary[normalizedWord] || [];
  }
  async getOnlineSynonyms(word) {
    console.log(`Attempting to find online synonyms for: ${word}`);
    const synonymsFromSynonymer = await this.getSynonymsFromSynonymerSe(word);
    if (synonymsFromSynonymer.length >= this.settings.maxSynonyms) {
      return synonymsFromSynonymer;
    }
    const synonymsFromSvenska = await this.getSynonymsFromSvenskaSe(word);
    const allSynonyms = [...synonymsFromSynonymer, ...synonymsFromSvenska];
    return [...new Set(allSynonyms)];
  }
  async getSynonymsFromSvenskaSe(word) {
    try {
      const url = `https://www.synonymlexikon.se/sv-syn/${encodeURIComponent(word.toLowerCase())}`;
      console.log(`Trying direct access to: ${url}`);
      const response = await (0, import_obsidian.requestUrl)({
        url,
        method: "GET",
        headers: {
          "Accept": "text/html",
          "User-Agent": "Mozilla/5.0 (compatible; ObsidianSynonymPlugin/1.0)"
        },
        throw: false
      });
      if (response.status === 200) {
        console.log("Successfully fetched from synonymlexikon.se");
        const html = response.text;
        const synonyms = [];
        const synonymPattern = /<li class="synonym-item">.*?>(.*?)<\/a>/gi;
        let match;
        while ((match = synonymPattern.exec(html)) !== null) {
          if (match[1]) {
            const synonym = match[1].trim();
            if (synonym.toLowerCase() !== word.toLowerCase()) {
              synonyms.push(synonym);
            }
          }
        }
        if (synonyms.length === 0) {
          const altPattern = /<dd class="word">(.*?)<\/dd>/gi;
          while ((match = altPattern.exec(html)) !== null) {
            if (match[1]) {
              const synonym = match[1].trim();
              if (synonym.toLowerCase() !== word.toLowerCase()) {
                synonyms.push(synonym);
              }
            }
          }
        }
        if (synonyms.length > 0) {
          console.log(`Found ${synonyms.length} synonyms from synonymlexikon.se`);
          return [...new Set(synonyms)];
        }
      }
      console.log(`Failed with status: ${response.status}`);
    } catch (error) {
      console.error("Error with synonymlexikon.se:", error);
    }
    console.log("Synonymlexikon attempts completed");
    return [];
  }
  async getSynonymsFromSynonymerSe(word) {
    try {
      const url = `https://synonymer.se/sv-syn/${encodeURIComponent(word.toLowerCase())}`;
      console.log(`Trying direct access to: ${url}`);
      const response = await (0, import_obsidian.requestUrl)({
        url,
        method: "GET",
        headers: {
          "Accept": "text/html",
          "User-Agent": "Mozilla/5.0 (compatible; ObsidianSynonymPlugin/1.0)"
        },
        throw: false
      });
      if (response.status === 200) {
        console.log("Successfully fetched from synonymer.se");
        const html = response.text;
        const synonyms = [];
        const mainPattern = /<div[^>]*class="main"[^>]*>([\s\S]*?)<\/div>/gi;
        let mainMatch;
        while ((mainMatch = mainPattern.exec(html)) !== null) {
          if (mainMatch[1]) {
            const synonymPattern = /<a[^>]*>([^<]+)<\/a>/gi;
            let match;
            while ((match = synonymPattern.exec(mainMatch[1])) !== null) {
              if (match[1]) {
                const synonym = match[1].trim();
                if (synonym.toLowerCase() !== word.toLowerCase() && !synonym.startsWith("/") && synonym.length > 1) {
                  synonyms.push(synonym);
                }
              }
            }
          }
        }
        if (synonyms.length === 0) {
          const patterns = [
            /<span class="word"[^>]*>([^<]+)<\/span>/gi,
            /<a href="\/sv-syn\/[^"]+"[^>]*>([^<]+)<\/a>/gi,
            /<td class="word"[^>]*>([^<]+)<\/td>/gi
          ];
          for (const pattern of patterns) {
            let match;
            while ((match = pattern.exec(html)) !== null) {
              if (match[1]) {
                const synonym = match[1].trim();
                if (synonym.toLowerCase() !== word.toLowerCase() && !synonym.startsWith("/") && synonym.length > 1) {
                  synonyms.push(synonym);
                }
              }
            }
          }
        }
        if (synonyms.length > 0) {
          console.log(`Found ${synonyms.length} synonyms from synonymer.se`);
          return [...new Set(synonyms)];
        } else {
          console.log("No synonyms found in the HTML from synonymer.se");
        }
      }
      console.log(`Failed with status: ${response.status}`);
    } catch (error) {
      console.error("Error with synonymer.se:", error);
    }
    try {
      const url = `https://svenska-synonymer.se/synonymer-till-${encodeURIComponent(word.toLowerCase())}`;
      console.log(`Trying direct access to: ${url}`);
      const response = await (0, import_obsidian.requestUrl)({
        url,
        method: "GET",
        headers: {
          "Accept": "text/html",
          "User-Agent": "Mozilla/5.0 (compatible; ObsidianSynonymPlugin/1.0)"
        },
        throw: false
      });
      if (response.status === 200) {
        console.log("Successfully fetched from svenska-synonymer.se");
        const html = response.text;
        const synonyms = [];
        const synonymSection = html.match(/<div[^>]*class="synonyms"[^>]*>([\s\S]*?)<\/div>/i);
        if (synonymSection && synonymSection[1]) {
          const synonymPattern = /<a[^>]*>([^<]+)<\/a>/gi;
          let match;
          while ((match = synonymPattern.exec(synonymSection[1])) !== null) {
            if (match[1]) {
              const synonym = match[1].trim();
              if (synonym.toLowerCase() !== word.toLowerCase()) {
                synonyms.push(synonym);
              }
            }
          }
        }
        if (synonyms.length > 0) {
          console.log(`Found ${synonyms.length} synonyms from svenska-synonymer.se`);
          return [...new Set(synonyms)];
        }
      }
      console.log(`Failed with status: ${response.status}`);
    } catch (error) {
      console.error("Error with svenska-synonymer.se:", error);
    }
    return [];
  }
};

// main.ts
var SynonymerPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    this.addStyles();
    await this.loadSettings();
    this.synonymService = new SynonymService(this.settings);
    this.addRibbonIcon("clipboard-list", "Synonymer", (evt) => {
      const view = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
      if (view) {
        const editor = view.editor;
        const selection = editor.getSelection();
        if (selection) {
          this.showSynonyms(selection, editor);
        } else {
          new import_obsidian2.Notice("Markera ett ord f\xF6r att hitta synonymer");
        }
      } else {
        new import_obsidian2.Notice("Den h\xE4r funktionen st\xF6ds endast i Markdown-vy");
      }
    });
    this.addCommand({
      id: "visa-synonymer",
      name: "Visa synonymer f\xF6r markerat ord",
      editorCallback: (editor, ctx) => {
        if (ctx instanceof import_obsidian2.MarkdownView) {
          const selection = editor.getSelection();
          if (selection) {
            this.showSynonyms(selection, editor);
          } else {
            new import_obsidian2.Notice("Markera ett ord f\xF6r att hitta synonymer");
          }
        } else {
          new import_obsidian2.Notice("Den h\xE4r funktionen st\xF6ds endast i Markdown-vy");
        }
      }
    });
    this.registerEvent(this.app.workspace.on("editor-menu", (menu, editor) => {
      const selection = editor.getSelection();
      if (selection && selection.trim() !== "") {
        menu.addItem((item) => {
          item.setTitle("Hitta synonymer").setIcon("clipboard-list").onClick(() => {
            this.showSynonyms(selection, editor);
          });
        });
      }
    }));
    this.addSettingTab(new SynonymerSettingTab(this.app, this));
    console.log("Synonym plugin loaded successfully");
  }
  addStyles() {
    const styleEl = document.createElement("style");
    styleEl.id = "synonym-plugin-styles";
    styleEl.textContent = `
			/* Synonym Plugin Custom Styles */
			.synonymer-menu-item {
			  padding: 8px 12px;
			  cursor: pointer;
			  display: flex;
			  align-items: center;
			  font-size: 14px;
			  width: 100%;
			  text-align: left;
			}
			
			.synonymer-menu-item:hover {
			  background-color: var(--background-modifier-hover);
			  color: var(--text-accent);
			}
			
			.synonymer-notice {
			  font-size: 14px;
			  padding: 8px;
			  background-color: var(--background-primary);
			  border-left: 4px solid var(--text-accent);
			  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
			}
			
			/* Make the toolbar icon black and white */
			.side-dock-ribbon-action[aria-label="Synonymer"] svg {
			  color: var(--icon-color) !important;
			}
		`;
    document.head.appendChild(styleEl);
  }
  async showSynonyms(word, editor) {
    try {
      new import_obsidian2.Notice(`S\xF6ker efter synonymer f\xF6r "${word}"...`, 2e3);
      const synonyms = await this.synonymService.getSynonyms(word);
      if (synonyms.length === 0) {
        new import_obsidian2.Notice(`Inga synonymer hittades f\xF6r "${word}"`, 3e3);
        return;
      }
      const menu = this.createSynonymMenu(synonyms, (synonym) => {
        editor.replaceSelection(synonym);
      });
      let rect;
      try {
        const selection = window.getSelection();
        if (selection && selection.rangeCount > 0) {
          const range = selection.getRangeAt(0);
          const domRect = range.getBoundingClientRect();
          rect = { left: domRect.left, bottom: domRect.bottom };
        } else {
          throw new Error("No selection ranges available");
        }
      } catch (e) {
        console.log("Falling back to editor cursor for menu position");
        const pos = editor.getCursor();
        const editorOffset = {
          top: 200,
          left: 100
        };
        try {
          const editorEl = editor.getScrollerElement();
          const editorRect = editorEl.getBoundingClientRect();
          editorOffset.top = editorRect.top;
          editorOffset.left = editorRect.left;
        } catch (err) {
          console.log("Couldn't get editor element position", err);
        }
        const lineHeight = 20;
        rect = {
          left: editorOffset.left,
          bottom: editorOffset.top + (pos.line + 1) * lineHeight
        };
      }
      menu.showAtPosition({ x: rect.left, y: rect.bottom });
    } catch (error) {
      console.error("Fel vid h\xE4mtning av synonymer:", error);
      let errorMessage;
      if (error instanceof Error) {
        if (error.message.includes("ERR_NAME_NOT_RESOLVED") || error.message.includes("ERR_CONNECTION_REFUSED") || error.message.includes("NetworkError")) {
          errorMessage = "Kunde inte ansluta till synonymtj\xE4nsten. Kontrollera din internetanslutning.";
        } else {
          errorMessage = error.message;
        }
      } else {
        errorMessage = "Ok\xE4nt fel";
      }
      new import_obsidian2.Notice(`Kunde inte h\xE4mta synonymer: ${errorMessage}`, 4e3);
    }
  }
  createSynonymMenu(synonyms, onSelect) {
    const menu = new import_obsidian2.Menu();
    menu.addItem((item) => {
      item.setTitle(`Hittade ${synonyms.length} synonymer:`).setDisabled(true);
    });
    menu.addSeparator();
    if (synonyms.length > 10) {
      const submenuSize = Math.ceil(synonyms.length / 2);
      const firstHalf = synonyms.slice(0, submenuSize);
      const secondHalf = synonyms.slice(submenuSize);
      firstHalf.forEach((synonym) => {
        menu.addItem((item) => {
          item.setTitle(synonym).onClick(() => onSelect(synonym));
        });
      });
      if (secondHalf.length > 0) {
        menu.addSeparator();
        secondHalf.forEach((synonym) => {
          menu.addItem((item) => {
            item.setTitle(synonym).onClick(() => onSelect(synonym));
          });
        });
      }
    } else {
      synonyms.forEach((synonym) => {
        menu.addItem((item) => {
          item.setTitle(synonym).onClick(() => onSelect(synonym));
        });
      });
    }
    return menu;
  }
  onunload() {
    const styleEl = document.getElementById("synonym-plugin-styles");
    if (styleEl)
      styleEl.remove();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SynonymerSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Inst\xE4llningar f\xF6r Synonymer" });
    new import_obsidian2.Setting(containerEl).setName("Aktivera online-s\xF6kning").setDesc("S\xF6k efter synonymer online n\xE4r de inte hittas i lokal ordlista").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableOnlineLookup).onChange(async (value) => {
      this.plugin.settings.enableOnlineLookup = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("API-k\xE4lla").setDesc("V\xE4lj vilken API-tj\xE4nst som ska anv\xE4ndas f\xF6r att h\xE4mta synonymer").addDropdown((dropdown) => dropdown.addOption("svenskaSe", "Svenska.se").addOption("synonymerSe", "Synonymer.se (kr\xE4ver API-nyckel)").setValue(this.plugin.settings.apiSource).onChange(async (value) => {
      this.plugin.settings.apiSource = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("API-nyckel").setDesc("API-nyckel f\xF6r synonymer.se (kr\xE4vs endast om du valt Synonymer.se)").addText((text) => text.setPlaceholder("Ange API-nyckel").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Anv\xE4nd lokal ordlista som reserv").setDesc("Om online-s\xF6kning misslyckas, anv\xE4nd lokal ordlista som reserv").addToggle((toggle) => toggle.setValue(this.plugin.settings.fallbackToLocalDictionary).onChange(async (value) => {
      this.plugin.settings.fallbackToLocalDictionary = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Alltid f\xF6rs\xF6k online-s\xF6kning").setDesc("S\xF6k online \xE4ven om lokala synonymer hittas").addToggle((toggle) => toggle.setValue(this.plugin.settings.alwaysTryOnline).onChange(async (value) => {
      this.plugin.settings.alwaysTryOnline = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("Max antal synonymer").setDesc("Maximalt antal synonymer att visa").addSlider((slider) => slider.setLimits(3, 20, 1).setValue(this.plugin.settings.maxSynonyms).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.maxSynonyms = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
